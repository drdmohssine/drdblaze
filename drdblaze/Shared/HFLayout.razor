@using System.Drawing;
@using VisNetwork.Blazor.Models;
@using drdblaze.Data;
@inherits LayoutComponentBase
@inject SharedData sharedData


    <div id="header">
        <!-- Your header content goes here -->
        <div class="m-2 row">
            <div class="col-2">
                <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Node Color:</label>
                <div class="col-4 w-50">
                    <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                   
                           @bind-value="sharedData.nodeColor"
                           @bind-value:after = "() => SetNodesColor()"
                           placeholder="Node Color"
                           aria-label="Node Color">
                </div>
                       
            </div>


        <div class="col-2">
            <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Edge Color:</label>
            <div class="col-4 w-50">
                <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                @bind-value="sharedData.edgeColor"
                @bind-value:after="() => SetEdgesColor()"
                       placeholder="Edge Color"
                       aria-label="Edge Color">
            </div>

        </div>

       
        <div class="col-2">
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1" checked value="LR" @onchange="(ChangeEventArgs e) => SetDirection(e)">
                    <label class="form-check-label" for="flexRadioDefault1">
                        LR
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" value="UD" @onchange="(ChangeEventArgs e) => SetDirection(e)">
                    <label class="form-check-label" for="flexRadioDefault2">
                        UD
                    </label>
                </div>

                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" value="Cluster" @onchange="(ChangeEventArgs e) => SetLayoutOption(e)">
                    <label class="form-check-label" for="flexRadioDefault2">
                        Clusters
                    </label>
                </div>

            </div>

        <div class="col-2">
                <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Canvas Image:</label>
                <div class="col-8 w-50">
                    <input id="coloraddon" type="text" class="form-control my-2 p-1 "
                    @bind-value="@(sharedData.canvasImage)" @bind-value:after="()=>{sharedData.NotifyStateChanged();}"
                           placeholder="Canvas Image"
                           aria-label="Canvas Image">
                </div>




            </div>

        <div class="col-2">
                <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Font Color:</label>
                <div class="col-8 w-50">
                    <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                    @bind-value="sharedData.fontColor"
                    @bind-value:after="() => SetFont()"
                           placeholder="Font Color"
                           aria-label="Font Color">
                </div>




            </div>
        <div class="col-1">
           
            <div class="col-8 " style="width:50px">
                <input id="cvsHeight" type="text" class="form-control my-2 p-1 "
                @bind-value="sharedData.canvasWidth"
                @bind-value:after="()=>{sharedData.NotifyStateChanged();}"
                       placeholder="Width"
                       aria-label="Width">
            </div>
            <div class="col-8 " style="width:50px">
                <input id="cvsWidth" type="text" class="form-control my-2 p-1 "
                @bind-value="sharedData.canvasHeight"
                @bind-value:after="()=>{sharedData.NotifyStateChanged();}"
                       placeholder="Height"
                       aria-label="Height">
            </div>




        </div>
        
        <div class="col-1">

            <div class="col-8 " style="width:100px">
                <input id="cvsHeight" type="text" class="form-control my-2 p-1 "
                @bind-value="sharedData.fontFamily"
                @bind-value:after="() => SetFont()"
                       placeholder="Font Family"
                       aria-label="Font Family">
            </div>
            <div class="col-8 " style="width:100px">
                <input id="cvsWidth" type="text" class="form-control my-2 p-1 "
                @bind-value="sharedData.fontSize"
                @bind-value:after="() => SetFont()"
                       placeholder="Font Size"
                       aria-label="Font Size">
            </div>




        </div>


        </div>


       
    </div>

    <div id="main">
        <!-- Your main content goes here -->
        <div class="content">
            @Body
        </div>
    </div>

   
  


@code{





    protected override void OnInitialized()
    {
        sharedData.OnChange += StateHasChanged;
    }

    private void SetNodesColor()
    {

        Color originalColor = ColorTranslator.FromHtml(sharedData.nodeColor);

        // Adjust the RGB components to make the color darker
        int darkeningFactor = 30; // You can adjust this value to control the darkness

        int newRed = Math.Max(originalColor.R - darkeningFactor, 0);
        int newGreen = Math.Max(originalColor.G - darkeningFactor, 0);
        int newBlue = Math.Max(originalColor.B - darkeningFactor, 0);

        Color darkerColor = Color.FromArgb(newRed, newGreen, newBlue);

        string darkerHexColor = ColorTranslator.ToHtml(darkerColor);


        foreach(var node in sharedData.nodes)
        {
            node.Color = new NodeColorType()
            { 
                 Border = darkerHexColor,
                 Background = sharedData.nodeColor
            };
        }

        sharedData.data = new NetworkData
            {
                Edges = sharedData.edges,
                Nodes = sharedData.nodes
            };


        sharedData.NotifyStateChanged();
    }

    private void SetEdgesColor()
    {


        foreach (var edge in sharedData.edges)
        {
            edge.Color = new ColorType()
                {
                    Color = sharedData.edgeColor,
                };
        }

        sharedData.data = new NetworkData
            {
                Edges = sharedData.edges,
                Nodes = sharedData.nodes
            };


        sharedData.NotifyStateChanged();
    }


    private void SetFont()
    {


        foreach (var node in sharedData.nodes)
        {
            

            node.Font = $"{sharedData.fontSize} {sharedData.fontFamily} {sharedData.fontColor} ";
            
            
        }

        sharedData.data = new NetworkData
            {
                Edges = sharedData.edges,
                Nodes = sharedData.nodes
            };


        sharedData.NotifyStateChanged();
    }
    private async Task SetCanvasColor(ChangeEventArgs eventArgs)
    {
        NetworkOptions netOption = sharedData.EditorConstructionOptions(sharedData.network);
       
    }

    private async Task SetDirection(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value.ToString() == "UD")
        {
            await sharedData.network.SetOptions(new NetworkOptions()
                {
                    Layout = new LayoutOptions()
                    {
                        Hierarchical = new HierarchicalOptions()
                        {
                            Direction = eventArgs.Value.ToString(),
                            SortMethod = "directed",
                            ShakeTowards = "leaves",
                            ParentCentralization = true,
                            LevelSeparation = 300
                        }

                    },

                    Physics = new PhysicsOptions()
                    {
                        //Enabled = false
                        BarnesHut = new BarnesHutOption()
                        {

                            AvoidOverlap = 1,
                            Damping = 1,
                        },

                        HierarchicalRepulsion = new HierarchicalRepulsionOption()
                        {
                            AvoidOverlap = 1,
                            Damping = 1,
                            NodeDistance = 120
                        }
                    }

                }

                );

        }
        else
        {
            await sharedData.network.SetOptions(new NetworkOptions()
                {
                    Layout = new LayoutOptions()
                    {
                        Hierarchical = new HierarchicalOptions()
                        {
                            Direction = eventArgs.Value.ToString(),
                            SortMethod = "directed",
                            ShakeTowards = "leaves",
                            ParentCentralization = true,
                            LevelSeparation = 300
                        }

                    },

                    Physics = new PhysicsOptions()
                    {
                        //Enabled = false
                        BarnesHut = new BarnesHutOption()
                        {

                            AvoidOverlap = 1,
                            Damping = 1,
                        },

                        HierarchicalRepulsion = new HierarchicalRepulsionOption()
                        {
                            AvoidOverlap = 1,
                            Damping = 1,
                            NodeDistance = 60
                        }
                    }

                }

       );

        }


        sharedData.NotifyStateChanged();
    }

    private async Task SetLayoutOption(ChangeEventArgs eventArgs)
    {
        await sharedData.network.SetOptions(new NetworkOptions()
            {

                Layout = new LayoutOptions()
                {
                    Hierarchical = new HierarchicalOptions()
                    {
                        Enabled = false
                    }
                },
                Physics = new PhysicsOptions()
                {
                    //Enabled = false
                    BarnesHut = new BarnesHutOption()
                    {
                        SpringLength = 200,
                        AvoidOverlap = 1,
                        Damping = 1,
                    }
                }
            }

        );


    }
       
    

    public void Dispose()
    {
        sharedData.OnChange -= StateHasChanged;

    }
}