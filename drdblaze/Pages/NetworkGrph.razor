@layout HFLayout

@page "/drdblaze/networkgrph"
@page "/networkgrph"
@using System.Text.Json;
@using System.Reflection;
@using VisNetwork.Blazor.Models
@using drdblaze.Data;
@using drdblaze.Shared;
@using static drdblaze.Data.SNData;

@inject SharedData sharedData



<div class="input-group">
    <input type="text" class="form-control"
    @bind-value="@GraphUrl"
           placeholder="Graph Url"
           aria-label="Graph Url"
           aria-describedby="button-addon2"
   >

    <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="GetGraph">Get Graph</button>
</div>

<div class="col">


    <div class="row" style="background-image:url(@(sharedData.canvasImage));height:@(sharedData.canvasHeight)px;width:@(sharedData.canvasWidth)px;">
        <Network @ref="sharedData.network" Id="visnet-id" Options="sharedData.EditorConstructionOptions" Data="@sharedData.data" OnDoubleClick="NetworkOnDoubleClick" class="vis-network-container "style="background-image:inherit;height:inherit;width:inherit;background-size:cover;background-repeat:no-repeat" />
    </div>


</div>

@code {


    [CascadingParameter]
    public Error? Error { get; set; }

    Project graphproject;

    int CurrentLevel;

    string GraphUrl = "https://raw.githubusercontent.com/snotesapp/LMStatics/main/HTML-jsFile.json";

    protected override async Task OnInitializedAsync()
    {

        HttpClient httpClient = new HttpClient();

        httpClient.BaseAddress = new Uri("https://raw.githubusercontent.com/");

        graphproject = await httpClient.GetFromJsonAsync<Project>("snotesapp/LMStatics/main/HTML-jsFile.json");

        graphproject.Packets = graphproject.Packets.Select(pr => { pr.Parent = graphproject.Packets.Where(pd => pd.PacketID == pr.ParentID).ToList().FirstOrDefault(); return pr; }).ToList();

        sharedData.nodes.Add(new Node("1", sharedData.SplitTextToFitWidth(graphproject.Packets.Where(p => p.PacketID == 1).FirstOrDefault().Title, 30), 0, "box")
        {
                Shadow = new NodeShadowOption()
                {
                    Enabled = true,

                },

                Font = $"{sharedData.fontSize} {sharedData.fontFamily} {sharedData.fontColor} ",
        }
        );



        foreach(Packet packet in graphproject.Packets.Where(p => p.ParentID == 1).ToList())
        {


            sharedData.nodes.Add(new Node()
            {
                Id = packet.PacketID.ToString(),
                Label = sharedData.SplitTextToFitWidth(packet.Title, 30),
                Level = packet.Level,
                Shape = "box",
                Shadow = new NodeShadowOption()
                {
                    Enabled = true,

                },
                Margin = new NodeMarginOption()
                {
                    Bottom=10,
                    Left = 10,
                    Right = 10,
                    Top = 10
                },
                    Font = $"{sharedData.fontSize} {sharedData.fontFamily} {sharedData.fontColor} ",
            } );

            //nodes.Add(new Node(packet.PacketID.ToString(), packet.Title, 2, "box"));
            sharedData.edges.Add(
                new Edge(packet.ParentID.ToString(), packet.PacketID.ToString()) 
                { Smooth = new EdgeSmoothOptions() { 
                    Enabled = false },
                    Color = new ColorType()
                    {
                       Color = sharedData.edgeColor,
                    },
                    Arrows = new Arrows { 
                    To = new ArrowsOptions { 
                        Enabled = true, 
                        ScaleFactor = 1 }
                } 
                }
            );

        }

        CurrentLevel = 2;
        await Task.Delay(500);

        sharedData.data = new NetworkData
            {
                Edges = sharedData.edges,
                Nodes = sharedData.nodes
            };

        StateHasChanged();
    }



    protected override void OnInitialized()
    {

        sharedData.OnChange += StateHasChanged;

    }


    private void OnDoubleClickEvent<T>(string name, T eventArg)
    {
        try{



            // Get the type of T
            Type type = typeof(T);

            // Get the property by name
            PropertyInfo propertyInfo = type.GetProperty("Nodes");

            if (propertyInfo != null)
            {


                // Get the value of the property from the object
                object nodesValue = propertyInfo.GetValue(eventArg);

                if (nodesValue is IEnumerable<object> nds && sharedData.nodes.Any())
                {
                    object firstNode = nds.First();

                    int parentid = Convert.ToInt16(firstNode);

                    List<Packet> packets = graphproject.Packets.Where(p => p.ParentID == parentid).ToList();

                    Packet selectedPacket = graphproject.Packets.Where(p => p.PacketID == parentid).FirstOrDefault();

                    if(packets.Count > 0)
                    {


                        foreach (Packet packet in packets)
                        {

                            if (packet.PacketID > sharedData.nodes.Count )
                            {


                                sharedData.nodes.Add(new Node(packet.PacketID.ToString(), sharedData.SplitTextToFitWidth(packet.Title, 30), packet.Level, "box")
                                {
                                        Font = $"{sharedData.fontSize} {sharedData.fontFamily} {sharedData.fontColor} ",
                                        Shadow = new NodeShadowOption()
                                        {
                                            Enabled = true,

                                        },
                                });

                                sharedData.edges.Add(new Edge(packet.ParentID.ToString(), packet.PacketID.ToString())
                                    {

                                        Smooth = new EdgeSmoothOptions() { Enabled = false },
                                        Arrows = new Arrows
                                        {
                                            To = new ArrowsOptions { Enabled = true },

                                        }
                                    });
                            }




                        }

                      

                      
                         sharedData.data = new NetworkData
                             {
                                 Edges = sharedData.edges,
                                 Nodes = sharedData.nodes
                             };

                       

                        CurrentLevel = packets[0].Level;

                    }


                    StateHasChanged();




                }
                else
                {
                    Console.WriteLine("No nodes found or property is not an enumerable.");
                }
            }
            else
            {
                Console.WriteLine("Property not found.");
            }
        }catch(Exception ex)
        {
            Error?.ProcessError(ex);
        }


    }

    private void NetworkOnDoubleClick(ClickEvent eventArg) => OnDoubleClickEvent("doubleClick", eventArg);

    //private void NetworkOnClick(ClickEvent eventArg) => AddEvent("click", eventArg);

    private async Task GetGraph()
    {
        sharedData.data = new NetworkData();
        sharedData.nodes = new List<Node>();
        sharedData.edges = new List<Edge>();
        HttpClient httpClient = new HttpClient();

        httpClient.BaseAddress = new Uri("https://raw.githubusercontent.com/");

        graphproject = await httpClient.GetFromJsonAsync<Project>(GraphUrl.Replace("https://raw.githubusercontent.com/", ""));

        graphproject.Packets = graphproject.Packets.Select(pr => { pr.Parent = graphproject.Packets.Where(pd => pd.PacketID == pr.ParentID).ToList().FirstOrDefault(); return pr; }).ToList();

        sharedData.nodes.Add(
            new Node("1", sharedData.SplitTextToFitWidth(graphproject.Packets.Where(p => p.PacketID == 1).FirstOrDefault().Title, 30), 0, "box")
            {
                Shadow = new NodeShadowOption()
                {
                    Enabled = true,

                },

                    Font = $"{sharedData.fontSize} {sharedData.fontFamily} {sharedData.fontColor} ",
            }
        );



        foreach (Packet packet in graphproject.Packets.Where(p => p.ParentID == 1).ToList())
        {


            sharedData.nodes.Add(new Node()
                {
                    Id = packet.PacketID.ToString(),
                    Label = sharedData.SplitTextToFitWidth(packet.Title, 30),
                    Level = packet.Level,
                    Shape = "box",
                    Shadow = new NodeShadowOption()
                    {
                        Enabled = true,

                    },
                    Margin = new NodeMarginOption()
                    {
                        Bottom = 10,
                        Left = 10,
                        Right = 10,
                        Top = 10
                    },
                    Font = $"{sharedData.fontSize} {sharedData.fontFamily} {sharedData.fontColor} ",
                });

            //nodes.Add(new Node(packet.PacketID.ToString(), packet.Title, 2, "box"));
            sharedData.edges.Add(new Edge(packet.ParentID.ToString(), packet.PacketID.ToString()) { Smooth = new EdgeSmoothOptions() { Enabled = false }, Arrows = new Arrows { To = new ArrowsOptions { Enabled = true, ScaleFactor = 1 } } });

        }

        CurrentLevel = 2;
        await Task.Delay(500);

        sharedData.data = new NetworkData
            {
                Edges = sharedData.edges,
                Nodes = sharedData.nodes
            };

        StateHasChanged();
    }

   
    public void Dispose()
    {
        sharedData.OnChange -= StateHasChanged;

    }
  
}