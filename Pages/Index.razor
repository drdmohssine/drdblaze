@page "/"
@using drdblaze.Shapes;

<div class="m-2" style="display: flex; flex-direction: row;">
    <input type="text" style="width:100px;margin-right: 10px" class="form-control"
           @bind-value="@InputWidth"
           placeholder="Width"
           aria-label="Width"
           aria-describedby="button-addon2">

    <input type="color" style="width:100px" class="form-control my-2"
           @bind-value="@FillColor"
           placeholder="Color"
           aria-label="Color"
           aria-describedby="button-addon2">
</div>

<div class="w-75 input-group m-1">
    <input type="text" class="form-control" 
    @bind-value="@InputText" 
    placeholder="Rectangle Text"
    aria-label="Rectangle Text" 
    aria-describedby="button-addon2" 
    @onkeyup="@(e => { if (e.Key == "Enter") { HandleButtonClick(); } })">

    <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="HandleButtonClick">Add</button>
</div>


<div style="width:1500px;height:2000px;background-color:lightgray ;overflow:auto">


        <svg width="1570" height="2000">

            @foreach (Line line in Lines)
            {
                <SNLine LineBack="RemoveLine" Line="line" Point1="line.Point1" Point2="line.Point2" StrokeColor="@line.Stroke" StrokeWidth="@line.StrokeWidth">
                </SNLine>
            }

            @foreach (Rectangle rect in Rectangles)
            {
                <SNRect RectBack ="RemoveRectangle" Rectangle="@rect" SelectedPoint="SelectPoint" OnMouseDown="StatChanged" OnMouseMove="StatChanged" OnMouseUp="StatChanged">

                </SNRect>


            }

          


        </svg>
    </div>


<ConfirmDialog @ref="dialog" />


@code{

    private ConfirmDialog dialog;


    List<Rectangle> Rectangles = new List<Rectangle>();
    List<Line> Lines = new List<Line>();


    private string InputText { get; set; }
    private int InputWidth { get; set; } = 200;
    private string FillColor { get; set; } = "bisque";
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }

    private void HandleButtonClick()
    {
        // Handle button click event here
        Rectangles.Add(
           new Rectangle(10, 10, InputWidth, 40)
               {

                   Fill = FillColor,
                   Text = InputText,

               }
        );

        InputText = "";
    }


    protected override void OnInitialized()
    {

    }

    int pointNumber = 0;
    Point pointN1 = new Point();
    private async Task SelectPoint(Point selectedPoint)
    {
        if(pointNumber == 0)
        {
            pointN1 = selectedPoint;
            pointNumber++ ;
        }else if(pointNumber == 1)
        {
            Lines.Add(
                new Line(pointN1, selectedPoint)
                    {
                        Stroke = "black",
                        StrokeWidth = 2,
                        Selected = false
        }
            );
            pointNumber = 0;
            pointN1 = new Point();
        }
        else
        {
            pointNumber = 0;
            pointN1 = new Point();
        }

    }

    private async Task RemoveLine(Line line)
    {
        var confirmation = await dialog.ShowAsync(
          title: "Are you sure you want to delete this?",
          message1: "This will delete the record. Once deleted can not be rolled back.",
          message2: "Do you want to proceed?");

        if (confirmation)
        {
            // do whatever
            Lines.Remove(line);
        }
        else
        {
            // do whatever
        }


      

    }
    private async Task RemoveRectangle(Rectangle rectangle)
    {
        var confirmation = await dialog.ShowAsync(
           title: "Are you sure you want to delete this?",
           message1: "This will delete the record. Once deleted can not be rolled back.",
           message2: "Do you want to proceed?");

        if (confirmation)
        {
            // do whatever
            Rectangles.Remove(rectangle);
        }
        else
        {
            // do whatever
        }

      




    }
    private void StatChanged()
    {

        StateHasChanged();
    }

}

