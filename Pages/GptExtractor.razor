@page "/drdblaze/gptextractor"
@page "/gptextractor"

@using System.Text.RegularExpressions;
@using SkiaSharp;
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.IO.Compression;
@using System.Text;
@using drdblaze.Data;
@using drdblaze.Shapes;
@using static drdblaze.Data.SNData;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient httpClient
@inject NavigationManager Navigation
@inject SharedData sharedData

@using SkiaSharp.Views.Blazor;

@if (skiaCanvasView)
{


    <div style="width:@(canvasWidth)px;height:@(canvasHeight)px;background-color:@(canvasColor) ;overflow:auto">
      <SKCanvasView @ref="skiaView" OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true"
                      style="position: absolute;
                                         top: 0;background-color:transparent;
                                         left: 0; width:inherit;height:inherit;
                                         pointer-events:inherit">



        </SKCanvasView>
    </div>


}
else
{
    <div class="container-fluid"  @onpointermove="(e) => {IsSelecting = e.CtrlKey ? true : false; }"
     @ondblclick="() => {SelectionWidth = 0; SelectionHeight = 0;ShowtMenu = false;Rectangles.Where( s => s.Selected).ToList().ForEach(s => s.Selected = false);}"
   
        @oncontextmenu = "(e) => ShowContextMenu(e)" @oncontextmenu:preventDefault
         style="height:100vh;width:100vw;background-color:@(canvasColor);overflow:auto">


        @if (ShowtMenu)
        {        
            <ul class="list-group" style="position:relative;top:@(MenuY+200)px;left:@(MenuX)px;width:200px;height:auto">

                <button type="button" class="list-group-item list-group-item-action" @onclick="ExtractTitles">Extract Here</button>

                <div type="button" class="dropend">
                    <button class="list-group-item dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false" @onclick='()=>{SelectedShapeOption = "";}'>
                        Shapes
                    </button>

                    <ul class="dropdown-menu form-check">
                        <div class=" list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="TLC" value="TLC" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="TLC">
                                TLC
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="TRC" value="TRC" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="TRC">
                                TRC
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="BLC" value="BLC" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="BLC">
                                BLC
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="BRC" value="BRC" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="BRC">
                                BRC
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="H1L" value="H1L" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="H1L">
                                H1L
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="H2L" value="H2L" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="H2L">
                                H2L
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="V1L" value="V1L" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="V1L">
                                V1L
                            </label>
                        </div>
                        <div class="list-group-item list-group-item-action">
                            <input class="mx-0 form-check-input" type="radio" name="radioGroup" id="V2L" value="V2L" @onchange="@((ChangeEventArgs e) => Set(e) )" />
                            <label class="ms-1 form-check-label" for="V2L">
                                V2L
                            </label>
                        </div>


                    </ul>
                </div>

                <li class="list-group-item">A second item</li>
                <li class="list-group-item">A third item</li>

            </ul>
        }


        @if (IsSelecting)
        {
            <svg id="SvgCanvas" style="border: 1px solid black;" x="0" y="0" width="@canvasWidth" height="@canvasHeight"
         @onmousedown="StartSelection" @onmouseup="EndSelection" @onmousemove="UpdateSelection" @onmouseleave="EndSelection">

                <rect style="position:relative;z-index:1" 
                      x="@SelectionStartX" y="@SelectionStartY" width="@SelectionWidth" height="@SelectionHeight"
                      rx="10" ry="10" stroke-width="2" stroke="black" fill="transparent">


                </rect>

                @foreach (Line line in Lines)
                {
                    <SNLine LineBack="RemoveLine" Line="line" Point1="line.Point1" Point2="line.Point2" StrokeColor="@line.Stroke" StrokeWidth="@line.StrokeWidth">
                    </SNLine>
                }

                @foreach (Rectangle rect in Rectangles)
                {
                    <SNRect TextColor = "@txtColor" RectBack="OnShowModalClick" Rectangle="@rect" SelectedPoint="SelectPoint" OnMouseDown="StatChanged" OnMouseMove="StatChanged" OnMouseUp="StatChanged">

                    </SNRect>

                }

            
            </svg>

        }
        else
        {
            <svg id="SvgCanvas" style="border: 1px solid black;" x="0" y="0" width="@canvasWidth" height="@canvasHeight">


                @for (int x = 0; x <= canvasWidth; x += 50)
                {
                    <line x1="@x" y1="0" x2="@x" y2="@canvasHeight" style="stroke: #999; stroke-width: 1;" />
                }
                @for (int y = 0; y <= canvasHeight; y += 50)
                {
                    <line x1="0" y1="@y" x2="@canvasWidth" y2="@y" style="stroke: #999; stroke-width: 1;" />
                }


                @foreach (Line line in Lines)
                {
                    <SNLine LineBack="RemoveLine" Line="line" Point1="line.Point1" Point2="line.Point2" StrokeColor="@line.Stroke" StrokeWidth="@line.StrokeWidth">
                    </SNLine>
                }

                @foreach (Rectangle rect in Rectangles)
                {
                    <SNRect TextColor = "@txtColor" RectBack="OnShowModalClick" Rectangle="@rect" SelectedPoint="SelectPoint" OnMouseDown="StatChanged" OnMouseMove="StatChanged" OnMouseUp="StatChanged">

                    </SNRect>

                }


                <rect style="position:relative;z-index:5" 
                @onmousedown:stopPropagation @onmouseup:stopPropagation @onmousemove:stopPropagation @onmouseleave:stopPropagation
                @onmousedown="MouseDown" @onmouseup="MouseUp" @onmousemove="MouseMove" @onmouseleave="MouseUp"
                      x="@SelectionStartX" y="@SelectionStartY" width="@SelectionWidth" height="@SelectionHeight"
                      rx="10" ry="10" stroke-width="2" stroke="black" fill="transparent">
                </rect>


            </svg>

        }


      
    </div>

}

<Button style="position:absolute;top:5px;left:600px;width:10px;height:10px" Color="ButtonColor.Danger" @onclick="(async () => { await ShowOffcanvasAsync(); })"></Button>

<div class="form-check form-switch" style="position:absolute;top:1px;left:700px;">
    <input class="form-check-input bg-danger" type="checkbox" id="flexSwitchCheck" @bind-value="skiaCanvasView" />
    <label class="form-check-label" for="flexSwitchCheck">View</label>
</div>

<ConfirmDialog @ref="dialog" />
<Modal @ref="modal" Title="Modal title">
    <BodyTemplate>

        <div class="w-75 input-group m-1">
            <input type="text" class="form-control"
                   @bind-value="@NewText"
                   placeholder="Rename Rectangle"
                   aria-label="Rename Rectangle"
                   aria-describedby="button-addon2"
                   @onkeyup="@(e => { if (e.Key == "Enter") { HandleButtonClick(); } })">

            <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="HandleButtonClick">Add</button>
        </div>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
        <Button Color="ButtonColor.Primary">Save changes</Button>
    </FooterTemplate>
</Modal>

<Offcanvas @ref="offcanvas" Title="Settings">
    <BodyTemplate>

        <div class="card">
            <div class="m-2 row">
                 <div class="col-6">
                    <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Canvas Color:</label>
                    <div class="col-8 w-50">
                        <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                               @bind-value="@canvasColor"
                               placeholder="Color"
                               aria-label="Color">
                    </div>
                </div>

                <div class="col-6">
                    <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Text Color:</label>
                    <div class="col-8 w-50">
                        <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                               @bind-value="@txtColor"
                               placeholder="Color"
                               aria-label="Color">
                    </div>
                </div>

            </div>


            <div class="m-2 row ">
                <div class="col-6">
                    <label for="Canvaswidth" class="form-label">Canvas Width</label>

                    <input id="Canvaswidth" type="text" style="width:100px;margin-right: 10px" class="form-control"
                           @bind-value="@canvasWidth"
                           placeholder="Canvas Width"
                           aria-label="Canvas Width">
                </div>
                <div class="col-6">
                    <label for="Canvasheight" class="form-label">Canvas Height</label>

                    <input id="Canvasheight" type="text" style="width:100px;margin-right: 10px" class="form-control"
                           @bind-value="@canvasHeight"
                           placeholder="Canvas Height"
                           aria-label="Canvas Height">
                </div>

            </div>

        </div>


        <div class="card">
            <div class="m-2 row">

                <div class="col-6">
                    <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Rects Color:</label>
                    <div class="col-8 w-50">
                        <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                               @bind-value="@FillColor"
                               placeholder="Color"
                               aria-label="Color">
                    </div>

                </div>

                <div class="col-6">
                    <label for="coloraddon" class="col-4 col-form-label" style="width:120px">Rect Border:</label>
                    <div class="col-8 w-50">
                        <input id="coloraddon" type="color" class="form-control my-2 p-1 "
                               @bind-value="@rectBorderColor"
                               placeholder="Color"
                               aria-label="Color">
                    </div>
                </div>

            </div>

            <div class="m-2 row">
                <dive class="col-6">
                    <label for="rectwidth" class="form-label">Rect Width</label>

                    <input id="rectwidth" type="text" style="width:100px;margin-right: 10px" class="form-control"
                           @bind-value="@RectWidth"
                           placeholder="Rect Width"
                           aria-label="Rect Width">
                </dive>

                <div class="col-6">
                    <label for="rectheight" class="form-label">Rect Height</label>

                    <input id="rectheight" type="text" style="width:100px;margin-right: 10px" class="form-control"
                           @bind-value="@RectHeight"
                           placeholder="Rect Height"
                           aria-label="Rect Height">
                </div>

            </div>

            <div class="w-75 input-group m-3">
                <input type="text" class="form-control"
                       @bind-value="@RectText"
                       placeholder="Rectangle Text"
                       aria-label="Rectangle Text"
                       aria-describedby="button-addon2"
                       @onkeyup="@(e => { if (e.Key == "Enter") { HandleButtonClick(); } })">

                <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="HandleButtonClick">Add</button>
            </div>

        </div>

        <div class="card">
               <div class="m-2 row">
                <input type="text" class="form-control"
                @bind-value="@TextToRemove"
                       placeholder="Pattern"
                       aria-label="Pattern"
                       aria-describedby="button-addon2"
                       >

            </div>

            <div class="input-group my-2">

                <textarea class="form-control mx-2 " style="height:100px"
                          @bind="@GptText" @bind:event="oninput"
                          placeholder="Gpt Text"
                          aria-label="Gpt Text"
                          aria-describedby="button-addon2"
                          @onkeyup="@(e => { if (e.Key == "Enter") { ExtractTitles(); } })">
</textarea>

            </div>
            <div class="input-group m-1" style="width:350px">


                <input class="form-control " list="datalistOptions" id="exampleDataList" @bind-value="ParentRectText" placeholder="Type to search...">
                <datalist id="datalistOptions">
                    @foreach (Rectangle rectangle in Rectangles)
                    {
                        <option value="@rectangle.Text" />
                    }

                </datalist>
                <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="SelectParent">Link</button>
            </div>

        </div>


    </BodyTemplate>
    <FooterTemplate>
        <Button Class="mx-2" Color="ButtonColor.Secondary" @onclick="() => DownloadProjectFile() ">Download</Button>
        <Button Class="mx-2" Color="ButtonColor.Secondary" @onclick="() => DownloadSvgAsImage() ">Download Image</Button>

        <Button Class="mx-2" Color="ButtonColor.Secondary" @onclick="() => offcanvas?.HideAsync()">Close</Button>
    </FooterTemplate>
</Offcanvas>


@code {

    IJSObjectReference JSmodule;
    private SKCanvasView? skiaView;
    ElementReference SvgCanvas;

    private ConfirmDialog? dialog;
    private Offcanvas? offcanvas;
    private bool skiaCanvasView { get; set; } = false;
    private SKTypeface typeface { get; set; }

    private string SelectedShapeOption { get; set; }

    List<Rectangle> Rectangles = new List<Rectangle>();
    List<Line> Lines = new List<Line>();

    private int RectId { get; set; } = 1;

    private string RectText { get; set; }
    private string TextToRemove { get; set; } = "^([a-z])\\.\\s";
    private string GptText { get; set; }
    private string NewText { get; set; } = "";
    private string parent { get; set; }
    private int RectWidth { get; set; } = 200;
    private int RectHeight { get; set; } = 40;
    private string FillColor { get; set; } = "#Ffe4c4";

    private bool IsSelecting = false;
    private bool IsDragging = false;
    private double SelectionStartX;
    private double SelectionStartY;
    private double SelectionWidth;
    private double SelectionHeight;

    private int canvasWidth { get; set; } = 1500;
    private int canvasHeight { get; set; } = 1500;
    public string canvasColor { get; set; } = "#cbbace";
    public string txtColor { get; set; } = "#000000";
    public string rectBorderColor { get; set; } = "#000000";

    public DirectoryInfo ProjectPath { get; set; }



    protected override async Task OnInitializedAsync()
    {

        
        // download the font file
        byte[] fontData = await httpClient.GetByteArrayAsync("Fonts/RobotoSlabFont.ttf");
        // create an SKTypeface object from the font data

        typeface = SKTypeface.FromData(SKData.CreateCopy(fontData));

    }

    void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {

        SKImageInfo info = args.Info;
        SKSurface surface = args.Surface;
        SKCanvas canvas = args.Surface.Canvas;

        DrawGraph(canvas);


    }


    private void StartSelection(MouseEventArgs e)
    {
        if (IsDragging == false)
        {
            IsSelecting = true;
            SelectionWidth = 0;
            SelectionHeight = 0;
            SelectionStartX = e.OffsetX;
            SelectionStartY = e.OffsetY;
        }



    }

    private void UpdateSelection(MouseEventArgs e)
    {
        if (IsSelecting)
        {
            SelectionWidth = e.OffsetX - SelectionStartX;
            SelectionHeight = e.OffsetY - SelectionStartY;

        }


        // StateHasChanged();
    }

    private void EndSelection(MouseEventArgs e)
    {


        // Loop through all the SNRects and check if they intersect with the selection rectangle
        foreach (var rect in Rectangles)
        {
            var rectX = rect.X;
            var rectY = rect.Y;
            var rectWidth = rect.Width;
            var rectHeight = rect.Height;

            var intersection = !(rectX > SelectionStartX + SelectionWidth ||
                rectX + rectWidth < SelectionStartX ||
                rectY > SelectionStartY + SelectionHeight ||
                rectY + rectHeight < SelectionStartY);

            if (intersection)
            {
                rect.Selected = true;
            }
            else
            {
                rect.Selected = false;
            }
        }
        // IsDragging = true;
        IsSelecting = false;
        // SelectionWidth = 0;
        // SelectionHeight = 0;
        //StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            //for load JS File
            JSmodule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./JSFiles/drdblazeJS.js");
        }

    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        StateHasChanged();
    }

    private void HandleButtonClick()
    {
        // Handle button click event here
        Rectangles.Add(
           new Rectangle(10, 10, RectWidth, RectHeight)
               {
                   RectangleID = RectId,
                   Fill = FillColor,
                   Text = RectText,
                   BorderColor = rectBorderColor,
                   

               }
        );
        sharedData.MainProject.Packets.Add(
                    new Packet { PacketID = RectId, Title = RectText, Selected = true, ProjectFK = 1 }
                );

        RectId++;
        RectText = "";

    }


    protected override void OnInitialized()
    {
        ProjectPath = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections");
        Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections/0/bitmaps");
        DirectoryInfo imagespth = Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "project/collections/0/images");

        using (var bitmap = new SkiaSharp.SKBitmap(600, 400))
        {
            bitmap.Erase(SKColor.Parse("#FF7F50"));
            using (var canvas = new SkiaSharp.SKCanvas(bitmap))
            {
                var paint = new SkiaSharp.SKPaint()
                    {
                        Color = SKColors.Black,
                        TextSize = 20,
                        IsAntialias = true,
                        Typeface = SKTypeface.FromFamilyName("Arial")
                    };
                canvas.DrawText("Copyright © 2023 sNotes. All rights reserved.", 20, 100, paint);

            }
            using (var image = SkiaSharp.SKImage.FromBitmap(bitmap))
            using (var data = image.Encode(SkiaSharp.SKEncodedImageFormat.Jpeg, 100))
            {
                using (var stream = File.OpenWrite(imagespth.FullName + "/blanc.jpeg"))
                {
                    data.SaveTo(stream);
                }
            }
        }


        NotesCollection defaultNC = new NotesCollection()
            {
                NotesCollectionID = 1,
                ProjectFK = 1,
                Title = "Default Collection",
                Selected = true,
                Note = new List<Note>()
            };

        sharedData.MainProject.NotesCollection.Add(defaultNC);

        sharedData.OnChange += StateHasChanged;

    }

    private bool ShowtMenu { get; set; }
    private double MenuX { get; set; } = 30;
    private double MenuY { get; set; } = 30;
    private void ShowContextMenu(MouseEventArgs e)
    {
        Console.WriteLine($"X Position:{e.OffsetX}");
        ShowtMenu = true;
        MenuX = e.OffsetX;
        MenuY = e.OffsetY;
    }

    int pointNumber = 0;
    Point pointN1 = new Point();
    private async Task SelectPoint(Point selectedPoint)
    {
        if (pointNumber == 0)
        {
            pointN1 = selectedPoint;
            pointNumber++;
        }
        else if (pointNumber == 1)
        {
            Lines.Add(
                new Line(pointN1, selectedPoint)
                    {
                        Stroke = "black",
                        StrokeWidth = 2,
                        Selected = false
                    }
            );
            pointNumber = 0;
            pointN1 = new Point();
        }
        else
        {
            pointNumber = 0;
            pointN1 = new Point();
        }

    }

    private async Task RemoveLine(Line line)
    {
        var confirmation = await dialog.ShowAsync(
          title: "Are you sure you want to delete this?",
          message1: "This will delete the record. Once deleted can not be rolled back.",
          message2: "Do you want to proceed?");

        if (confirmation)
        {
            // do whatever
            Lines.Remove(line);
        }
        else
        {
            // do whatever
        }

    }
    private async Task RemoveRectangle(Rectangle rectangle)
    {
        var confirmation = await dialog.ShowAsync(
           title: "Are you sure you want to delete this?",
           message1: "This will delete the record. Once deleted can not be rolled back.",
           message2: "Do you want to proceed?");

        if (confirmation)
        {
            // do whatever
            sharedData.MainProject.Packets.Remove(sharedData.MainProject.Packets.Where(r => r.PacketID == rectangle.RectangleID).FirstOrDefault());
            Rectangles.Remove(rectangle);
            await modal?.HideAsync();
        }
        else
        {
            // do whatever
        }



    }

    private void RenameRectangle()
    {
        ParentRect = Rectangles.FirstOrDefault(r => r.Text == ParentRectText);
        foreach (Rectangle rect in Rectangles.Where(s => s.Selected == true).ToList())
        {

            Lines.Add(
                    new Line(ParentRect.MC, rect.MC)
                        {
                            Stroke = "black",
                            StrokeWidth = 2,
                            Selected = false
                        }
                );
        }


    }


    private Modal modal;

    private async Task OnShowModalClick(Rectangle rectangle)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("Rectangle", rectangle);
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<Rectangle>(this, RemoveRectangle));
        await modal.ShowAsync<RectModal>(title: "Rectangle Details", parameters: parameters);
    }

    private string? message;

    private void ShowDTMessage(MouseEventArgs e) => message = $"The current DT is:  {DateTime.Now}.";

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }


    private void StatChanged()
    {
        StateHasChanged();
    }

    // Unregister the drop zone events
    public async ValueTask DisposeAsync()
    {

        if (JSmodule != null)
        {
            await JSmodule.DisposeAsync();
        }
    }


    private double startX;
    private double startY;
    private async Task MouseDown(MouseEventArgs e)
    {

        IsDragging = true;
        startX = e.OffsetX;
        startY = e.OffsetY;

    }

    private async Task MouseUp(MouseEventArgs e)
    {
        IsDragging = false;

    }
    private async Task MouseMove(MouseEventArgs e)
    {
        if (IsDragging)
        {
            double deltaX = e.OffsetX - startX;
            double deltaY = e.OffsetY - startY;
            SelectionStartX += (float)deltaX;
            SelectionStartY += (float)deltaY;
            foreach (Rectangle rect in Rectangles.Where(s => s.Selected == true).ToList())
            {
                rect.X += (float)deltaX;
                rect.Y += (float)deltaY;
            }

            startX = e.OffsetX;
            startY = e.OffsetY;
        }

    }

    private async Task ExtractTitles()
    {
        @if (String.IsNullOrWhiteSpace(GptText))
        {
            await offcanvas.ShowAsync();
        }
        else
        {
            if (String.IsNullOrWhiteSpace(TextToRemove))
            {
                string pattern = @"^(.*?):";

                string[] paragraphs = GptText.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
                float rectYPos = (float)MenuY;

                foreach (string paragraph in paragraphs)
                {
                    Match match = Regex.Match(paragraph, pattern);
                    if (match.Success)
                    {
                        string result = match.Groups[1].Value;

                        // Handle button click event here
                        Rectangles.Add(
                           new Rectangle((float)MenuX, rectYPos, RectWidth, RectHeight)
                               {
                                   RectangleID = RectId,
                                   Fill = FillColor,
                                   Text = result,
                                   BorderColor = rectBorderColor

                               }
                        );
                        sharedData.MainProject.Packets.Add(
                            new Packet { PacketID = RectId, Title = result, Selected = true, ProjectFK = 1 }
                        );
                        rectYPos += 45;
                        RectId++;
                        //Console.WriteLine(result);
                    }
                }

                GptText = "";
                ShowtMenu = false;
            }
            else
            {
                

                string pattern = @"^(.*?):";

                string[] paragraphs = GptText.Replace(TextToRemove, "").Split(new[] { Environment.NewLine }, StringSplitOptions.None);


                float rectYPos = (float)MenuY;

                foreach (string paragraph in paragraphs)
                {
                    Match match = Regex.Match(paragraph, pattern);
                    if (match.Success)
                    {
                        string result = Regex.Replace(match.Groups[1].Value, TextToRemove, "");

                        // Handle button click event here
                        if (result == match.Groups[1].Value)
                        {
                            ParentRect = new Rectangle((float)MenuX, rectYPos, RectWidth, RectHeight)
                                {
                                    RectangleID = RectId,
                                    Fill = FillColor,
                                    Text = result,
                                    BorderColor = rectBorderColor

                                };

                            Rectangles.Add(ParentRect);

                            ParentPacket = new Packet { PacketID = RectId, Title = result, Selected = true, ProjectFK = 1 };

                            sharedData.MainProject.Packets.Add(ParentPacket);
                           
                        }
                        else
                        {
                            

                            Rectangle childRect = new Rectangle((float)MenuX + 100, rectYPos, RectWidth, RectHeight)
                                {
                                    RectangleID = RectId,
                                    Fill = FillColor,
                                    Text = result,
                                    BorderColor = rectBorderColor

                                };
                            Rectangles.Add(childRect);

                            Packet chPacket = new Packet { PacketID = RectId, Title = result, Selected = true, ProjectFK = 1 };
                            sharedData.MainProject.Packets.Add(chPacket);

                            try{
                                Lines.Add(
                               new Line(ParentRect.MC, childRect.MC)
                                   {
                                       Stroke = "#000000",
                                       StrokeWidth = 2,
                                       Selected = false
                                   }
                                   );

                                chPacket.ParentID = ParentPacket.PacketID;

                                chPacket.Selected = false;
                            }catch(Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                            }

                        
                       }

                       
                        rectYPos += 45;
                        RectId++;
                        //Console.WriteLine(result);
                    }
                }

                GptText = "";
                ShowtMenu = false;
            }

        }

    }

    private string ParentRectText { get; set; }
    private Rectangle ParentRect { get; set; }
    private Packet ParentPacket { get; set; }
    private Packet ChildPacket { get; set; }

    private void SelectParent()
    {
        ParentRect = Rectangles.FirstOrDefault(r => r.Text == ParentRectText);
        ParentPacket = sharedData.MainProject.Packets.FirstOrDefault(p => p.PacketID == ParentRect.RectangleID);

        foreach (Rectangle rect in Rectangles.Where(s => s.Selected == true).ToList())
        {
            ChildPacket = sharedData.MainProject.Packets.FirstOrDefault(p => p.PacketID == rect.RectangleID);
            Lines.Add(
                    new Line(ParentRect.MC, rect.MC)
                        {
                            Stroke = "#000000",
                            StrokeWidth = 2,
                            Selected = false
                        }
                );

            ChildPacket.ParentID = ParentPacket.PacketID;
            //ChildPacket.Parent = null;
            ChildPacket.Selected = false;
        }

        ParentRectText = "";
    }


    private async Task ShowOffcanvasAsync()
    {
        await offcanvas?.ShowAsync();
    }
    private async Task HideOffcanvasAsync()
    {
        await offcanvas?.HideAsync();
    }



    #region Download Project

    private static readonly JsonSerializerOptions ProjectOptions = new()
        {
            ReferenceHandler = ReferenceHandler.IgnoreCycles,
            WriteIndented = true,
            IgnoreReadOnlyProperties = true,
        };

    private static readonly JsonSerializerOptions NoteCardsOptions = new()
        {
            WriteIndented = true,
        };

    public byte[] fileArray;
    private async Task<byte[]> BuildProjectPackage()
    {
        var packageFilePath = AppDomain.CurrentDomain.BaseDirectory + "Package/package.zip";

        if (File.Exists(packageFilePath))
        {
            File.Delete(packageFilePath);
        }


        // Create the package directory
        Directory.CreateDirectory(AppDomain.CurrentDomain.BaseDirectory + "Package");


        // Create the meta object and serialize it to a byte array
        var metaObject = new MetaObject
            {
                Version = "1.0"
            };
        byte[] metaJsonBytes = SerializeMetaObject(metaObject);


        // Write the serialized meta object to a file
        File.WriteAllBytes(ProjectPath.Parent.FullName + "/meta.json", metaJsonBytes);


        // Serialize the full project object to a file

        await SerializeProjectAsync(sharedData.MainProject);


        // Serialize the list of note cards to a file
        List<NotePacket> allNoteCards = new List<NotePacket>();
        if (allNoteCards != null)
        {
            await SerializeNoteCardsAsync(allNoteCards);
        }

        // Create the package file


        ZipFile.CreateFromDirectory(ProjectPath.Parent.FullName, packageFilePath);

        // Read the package file into a byte array
        using (var packageFile = new FileStream(packageFilePath, FileMode.Open))
        {
            fileArray = new byte[packageFile.Length];
            await packageFile.ReadAsync(fileArray, 0, (int)packageFile.Length);
        }


        return fileArray;
    }


    public async Task DownloadProjectFile()
    {
        try
        {
            if(Rectangles.Count > 0)
            {
                sharedData.MainProject.Name = Rectangles[0].Text;

            }

            byte[] ProjectArray = await BuildProjectPackage();


            var fileName = $"{sharedData.MainProject.Name}.snotes";

            await JSmodule.InvokeVoidAsync("blazorDownloadFile", fileName, "application/zip", ProjectArray);

            // Delete the package file
            var packageFilePath = AppDomain.CurrentDomain.BaseDirectory + "Package/package.zip";


            if (Path.HasExtension(packageFilePath))
            {
                File.Delete(packageFilePath);
            }


        }
        catch (Exception)
        {

        }




    }

    private byte[] SerializeMetaObject(MetaObject metaObject)
    {
        return JsonSerializer.SerializeToUtf8Bytes(metaObject);
    }

    private async Task SerializeProjectAsync(Project project)
    {
        var jsonProjectFilePath = ProjectPath.Parent.FullName + "/jsonFile.json";
        await using (FileStream createProjectStream = File.Create(jsonProjectFilePath))
        {
            await JsonSerializer.SerializeAsync<Project>(createProjectStream, project, ProjectOptions);
        }
    }
    private async Task SerializeNoteCardsAsync(List<NotePacket> noteCards)
    {
        var jsonNoteCardsFilePath = ProjectPath.Parent.FullName + "/notecards.json";
        await using (FileStream createNotecardsStream = File.Create(jsonNoteCardsFilePath))
        {
            await JsonSerializer.SerializeAsync<List<NotePacket>>(createNotecardsStream, noteCards, NoteCardsOptions);
        }
    }



    #endregion

    record MetaObject
    {
        public string Version { get; init; } = "1.0";
    }


    private void DrawGraph(SKCanvas canvas)
    {

        SKColor CanvasSKColor = SKColor.Parse(canvasColor);
        canvas.Clear(SKColors.Transparent);
        SKPaint canvaspaint = new SKPaint
            {
                Color = CanvasSKColor,
            };
        canvas.DrawPaint(canvaspaint);

        SKPaint linepaint = new SKPaint
            {
                IsAntialias = true
            };

        foreach (Line line in Lines)
        {

            linepaint.Color = SKColor.Parse(line.Stroke);
            linepaint.StrokeWidth = line.StrokeWidth;
            canvas.DrawLine(line.Point1.Position, line.Point2.Position, linepaint);

        }



        foreach (Rectangle rectangle in Rectangles)
        {
            // Parse the SVG properties into variables
            float x = rectangle.X; // Replace with your value from "@Rectangle.X"
            float y = rectangle.Y; // Replace with your value from "@Rectangle.Y"
            float width = rectangle.Width; // Replace with your value from "@Rectangle.Width"
            float height = rectangle.Height; // Replace with your value from "@Rectangle.Height"
            float rx = 10;
            float ry = 10;
            SKColor strokeColor = SKColor.Parse(rectangle.BorderColor);
            float strokeWidth = 2;
            SKColor fillColor = SKColor.Parse(rectangle.Fill); // Replace with your value from "@Rectangle.Fill"
            var RectangleStyleFillShadow = SKImageFilter.CreateDropShadow(
                0,
                0,
                5,
                5,
                SKColors.Black.WithAlpha(100)
               );


            string text = rectangle.Text; // Replace with your desired text
            SKColor textColor = SKColor.Parse(txtColor); // Replace with your desired text color

            // Create a new paint object for the stroke
            SKPaint strokePaint = new SKPaint
                {
                    Color = strokeColor,
                    StrokeWidth = strokeWidth,
                    IsStroke = true,
                    IsAntialias = true,
                  

                };

            // Create a new paint object for the fill
            SKPaint fillPaint = new SKPaint
                {
                    Color = fillColor,
                    IsAntialias = true,
                    ImageFilter = RectangleStyleFillShadow
                };

            // Create a new paint object for the text
            SKPaint textPaint = new SKPaint
                {
                    Color = textColor,
                    TextSize = 15, // Replace with your desired text size
                    TextAlign = SKTextAlign.Center,
                    IsAntialias = true,
                    Typeface = typeface, // Set the typeface of the paint object


                };


            // Draw the rectangle with the specified properties
            SKRect rect = new SKRect(x, y, x + width, y + height);
            canvas.DrawRoundRect(rect, rx, ry, fillPaint);
            canvas.DrawRoundRect(rect, rx, ry, strokePaint);


            // Draw the text in the center of the rectangle
            SKRect textBounds = new SKRect();
            textPaint.MeasureText(text, ref textBounds);
            float textX = x + (width / 2);
            float textY = rectangle.MC.Position.Y;

            if (textBounds.Width < rect.Width)
            {
                canvas.DrawText(text, textX, textY + 5, textPaint);

            }
            else
            {
                try
                {
                    textY = rectangle.TM.Position.Y + textPaint.FontSpacing - 4;
                    string[] txtlines = text.Split("\n");
                    foreach (string txtline in txtlines)
                    {

                        canvas.DrawText(txtline, textX, textY, textPaint);
                        textY += textPaint.FontSpacing - 4;
                    }


                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.Message);
                }

            }

        }

    }

    private async Task DownloadSvgAsImage()
    {

        // Create a new bitmap with a width and height of 500 pixels
        SKBitmap bitmap = new SKBitmap(canvasWidth, canvasHeight);

        SKColor CanvasSKColor = SKColor.Parse(canvasColor);



        // Create a new canvas with the bitmap
        using (SKCanvas canvas = new SKCanvas(bitmap))
        {
            DrawGraph(canvas);



        }

        // Convert the bitmap to a byte array
        byte[] bytes = bitmap.Bytes;

        // Convert the bitmap to a JPEG file
        byte[] jpegData = null;
        using (SKImage image = SKImage.FromBitmap(bitmap))
        using (SKData data = image.Encode(SKEncodedImageFormat.Jpeg, 100))
        {
            jpegData = data.ToArray();
        }

        string imgfilename = (Rectangles.Count > 0) ? Rectangles[0].Text : "Diagram";
        // Save the JPEG file to disk
        await JSmodule.InvokeVoidAsync("blazorDownloadFile", $"{imgfilename}.jpg", "image/jpeg", jpegData);

        //File.WriteAllBytes("output.jpg", jpegData);
    }

    private void Set(ChangeEventArgs e)
    {
        try
        {
            SelectedShapeOption = e?.Value?.ToString();
            int w = 1;

            List<Rectangle> SelectedRectangles = Rectangles.Where(s => s.Selected == true).ToList();
            List<Rectangle> FirstList = SelectedRectangles.Take(SelectedRectangles.Count / 2).ToList();
            List<Rectangle> SecondList = SelectedRectangles.Skip(SelectedRectangles.Count / 2).ToList();

            if (SelectedShapeOption == "TLC")
            {

                float TWidths;
                foreach (Rectangle rect in FirstList)
                {

                    rect.X += (RectWidth + 5) * w;
                    rect.Y = SecondList[0].Y;
                    w++;

                }

                if (SelectedRectangles.Count % 2 == 0)
                {
                    foreach (Rectangle rect in SecondList)
                    {

                        rect.X = FirstList[0].X;
                        rect.Y += 45;


                    }
                }


                w = 1;
            };


            if (SelectedShapeOption == "TRC")
            {

                float TWidths;
                foreach (Rectangle rect in FirstList)
                {

                    rect.X += (RectWidth + 5) * w;
                    rect.Y = SecondList[0].Y;
                    w++;

                }

                foreach (Rectangle rect in SecondList)
                {

                    rect.X = FirstList.Last().X;
                    rect.Y += 45;


                }

            };

            if (SelectedShapeOption == "BLC")
            {


                foreach (Rectangle rect in SecondList)
                {



                    rect.X += (RectWidth + 5) * w;
                    rect.Y = SecondList[0].Y;
                    w++;

                }

                foreach (Rectangle rect in FirstList)
                {



                    rect.X = SecondList.First().X;


                }
                w = 1;
            };

            if (SelectedShapeOption == "BRC")
            {


                foreach (Rectangle rect in SecondList)
                {



                    rect.X += (RectWidth + 5) * w;
                    rect.Y = SecondList[0].Y;
                    w++;

                }

                foreach (Rectangle rect in FirstList)
                {



                    rect.X = SecondList.Last().X;


                }
                w = 1;
            };

            if (SelectedShapeOption == "H1L")
            {

                foreach (Rectangle rect in SelectedRectangles)
                {

                    rect.X += (RectWidth + 5) * w;
                    rect.Y = SelectedRectangles.First().Y;
                    w++;

                }


                w = 1;
            };

            if (SelectedShapeOption == "H2L")
            {

                if (SelectedRectangles.Count % 2 != 0)
                {
                    Rectangle popRect = SecondList.First();
                    FirstList.Add(popRect);
                    SecondList.Remove(popRect);
                }

                int l2w = 1;
                foreach (Rectangle rect in FirstList)
                {

                    rect.X += (RectWidth + 5) * w;
                    rect.Y = FirstList.First().Y;
                    w++;

                }

                foreach (Rectangle rect in SecondList)
                {

                    rect.X += (RectWidth + 5) * l2w;
                    rect.Y = FirstList.First().Y + 45;
                    l2w++;

                }

                w = 1;
            };

            if (SelectedShapeOption == "V1L")
            {

                foreach (Rectangle rect in SelectedRectangles)
                {

                    rect.X = SelectedRectangles.First().X;
                    if (SelectedRectangles.IndexOf(rect) > 0)
                    {
                        rect.Y = SelectedRectangles[SelectedRectangles.IndexOf(rect) - 1].Y + 45;

                    }


                }



            };

            if (SelectedShapeOption == "V2L")
            {

                if (SelectedRectangles.Count % 2 != 0)
                {
                    Rectangle popRect = SecondList.First();
                    FirstList.Add(popRect);
                    SecondList.Remove(popRect);
                }

                foreach (Rectangle rect in FirstList)
                {

                    rect.X = FirstList.First().X;
                    if (FirstList.IndexOf(rect) > 0)
                    {
                        rect.Y = FirstList[FirstList.IndexOf(rect) - 1].Y + 45;

                    }


                }

                float RectY = FirstList.First().Y;
                foreach (Rectangle rect in SecondList)
                {

                    rect.X += RectWidth + 5;

                    rect.Y = RectY;
                    RectY += 45;
                }

            };


            SelectedShapeOption = "";
        }
        catch(Exception ex)
        {

        }


    }

    public void Dispose()
    {
        sharedData.OnChange -= StateHasChanged;

    }
}

